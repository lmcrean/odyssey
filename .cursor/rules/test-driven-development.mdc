---
description: 
globs: 
alwaysApply: false
---
# Test-Driven Development (TDD) Practices - Backend

## Overview
Our backend follows a strict test-driven development approach with a multi-layered testing strategy that covers unit tests and end-to-end testing across different environments.

## Testing Structure

### Test Organization
- **Location**: All unit tests are placed in `__tests__/` directories underneath each module/file. Development and Production are tested in the `e2e/` folder
- **Framework**: We use **Vitest** for all unit testing; we use Playwright for all development testing.
- **Naming Convention**: Test files should follow the pattern `{ModuleName}.test.ts`

### Directory Structure Example
```
src/apps/auth/routes/login/
├── Controller.ts
├── Route.ts
└── __tests__/
    ├── Controller.test.ts
    └── Route.test.ts
```

## Testing Commands

### Unit & Integration Testing
```bash
# Test specific domain/app
npm run test "app/[domain]"

# Examples:
npm run test "app/auth"
npm run test "app/user" 
npm run test "app/chat"

# Test specific file
npm run test "Controller.test.ts"
npm run test "Route.test.ts"
```

### Development Environment Testing
```bash
# Test against development layer (SQLite localhost)
npm run test:dev
```
- **Database**: SQLite (local)
- **Purpose**: Fast local development testing
- **Use Case**: Quick feedback during development

### Production Environment Testing
```bash
# Test against production layer (Vercel + Neon PostgreSQL)
npm run test:prod
```
- **Database**: Neon PostgreSQL
- **Infrastructure**: Vercel deployment
- **Purpose**: Validate production environment compatibility
- **Use Case**: Pre-deployment validation and production issue debugging

## Testing Best Practices

### Test Organization
- **Domain-Specific**: Tests are organized by app/domain (auth, user, chat, etc.)
- **Isolated**: Each unit test should be independent and not rely on other tests
- **Clear Naming**: Test descriptions should clearly state what is being tested

### Test Environments
1. **Unit Tests**: Fast, isolated, no external dependencies
2. **Development Tests**: SQLite for quick local validation
3. **Production Tests**: Full environment testing with real database




### Command Usage Guidelines

#### Development Workflow
```bash
# 1. Write test first (TDD Red phase)
npm run test "app/auth" # Should fail

# 2. Implement feature (TDD Green phase)  
npm run test "app/auth" # Should pass

# 3. Test locally with dev environment
npm run test:dev

# 4. Before deployment, test production environment

npm run test:prod
```

#### Targeting Specific Tests
```bash
# Test entire domain
npm run test "app/user"

# Test specific functionality
npm run test "login"
npm run test "Controller"

# Test specific file
npm run test "LoginController.test.ts"
```

## Environment Configuration

### Development (test:dev)
- **Database**: SQLite (local file)
- **Speed**: Fast execution
- **Use**: Day-to-day development

### Production (test:prod)  
- **Database**: Neon PostgreSQL
- **Infrastructure**: Vercel
- **Speed**: Slower but realistic
- **Use**: Pre-deployment validation

## Integration with CI/CD

The testing strategy supports different deployment stages:
1. **Local Development**: `npm run test:dev`
2. **Pre-deployment**: `npm run test:prod`
3. **Continuous Integration**: Both dev and prod tests run in pipeline

## Key Benefits

- **Fast Feedback**: Quick unit tests with `npm run test`
- **Local Validation**: Dev environment testing with SQLite
- **Production Confidence**: Full environment testing before deployment
- **Domain Isolation**: Test specific business domains independently

- **Scalable Structure**: Tests are co-located with implementation code