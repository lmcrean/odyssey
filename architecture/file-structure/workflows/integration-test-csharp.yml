# Integration Tests for C# API and Angular Web App

name: Integration Tests (C# + Angular)

on:
  workflow_call:
    inputs:
      test_environment:
        description: "Test environment (staging/production)"
        required: true
        type: string
      api_url:
        description: "API URL to test against"
        required: true
        type: string
      web_url:
        description: "Web URL to test against"
        required: true
        type: string

jobs:
  test-api-integration:
    runs-on: ubuntu-latest
    
    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 🔧 Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      
      - name: 📦 Restore Integration Test Dependencies
        run: |
          cd tests/integration
          dotnet restore
      
      - name: 🧪 Run C# API Integration Tests
        run: |
          cd tests/integration
          
          echo "🔍 Running integration tests against: ${{ inputs.api_url }}"
          
          # Run integration tests with environment configuration
          dotnet test \
            --configuration Release \
            --logger "console;verbosity=detailed" \
            --logger "trx;LogFileName=api-integration-results.trx" \
            --collect:"XPlat Code Coverage" \
            -- \
            TestConfiguration.ApiBaseUrl="${{ inputs.api_url }}" \
            TestConfiguration.Environment="${{ inputs.test_environment }}"
        env:
          API_BASE_URL: ${{ inputs.api_url }}
          TEST_ENVIRONMENT: ${{ inputs.test_environment }}
      
      - name: 📊 Publish C# Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: C# API Integration Tests
          path: tests/integration/TestResults/*.trx
          reporter: dotnet-trx
          fail-on-error: false
      
      - name: 📈 Upload C# Code Coverage
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: tests/integration/TestResults/*/coverage.cobertura.xml
          flags: api-integration
          name: api-integration-coverage

  test-web-integration:
    runs-on: ubuntu-latest
    
    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: apps/web/package-lock.json
      
      - name: 📥 Install Dependencies
        run: |
          cd apps/web
          npm ci
      
      - name: 🧪 Run Angular Integration Tests with Vitest
        run: |
          cd apps/web
          
          echo "🔍 Running integration tests against API: ${{ inputs.api_url }}"
          echo "🔍 Running integration tests against Web: ${{ inputs.web_url }}"
          
          # Run integration tests with environment configuration
          npm run test:integration -- \
            --reporter=verbose \
            --reporter=junit \
            --outputFile=integration-test-results.xml \
            --coverage
        env:
          API_BASE_URL: ${{ inputs.api_url }}
          WEB_BASE_URL: ${{ inputs.web_url }}
          TEST_ENVIRONMENT: ${{ inputs.test_environment }}
      
      - name: 📊 Publish Angular Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Angular Integration Tests
          path: apps/web/integration-test-results.xml
          reporter: java-junit
          fail-on-error: false
      
      - name: 📈 Upload Angular Code Coverage
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: apps/web/coverage/lcov.info
          flags: web-integration
          name: web-integration-coverage

  test-e2e-cross-platform:
    runs-on: ubuntu-latest
    needs: [test-api-integration, test-web-integration]
    
    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: tests/e2e/package-lock.json
      
      - name: 📥 Install E2E Dependencies
        run: |
          cd tests/e2e
          npm ci
      
      - name: 🎭 Install Playwright Browsers
        run: |
          cd tests/e2e
          npx playwright install chromium firefox webkit
      
      - name: 🧪 Run Cross-Platform E2E Tests
        run: |
          cd tests/e2e
          
          echo "🔍 Running E2E tests against:"
          echo "📍 API: ${{ inputs.api_url }}"
          echo "📍 Web: ${{ inputs.web_url }}"
          
          # Run E2E tests across different browsers
          npx playwright test \
            --config=playwright.config.ts \
            --reporter=html \
            --reporter=junit \
            --output-dir=test-results
        env:
          API_BASE_URL: ${{ inputs.api_url }}
          WEB_BASE_URL: ${{ inputs.web_url }}
          TEST_ENVIRONMENT: ${{ inputs.test_environment }}
      
      - name: 📊 Upload E2E Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: tests/e2e/test-results/
          retention-days: 7
      
      - name: 📊 Publish E2E Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: E2E Cross-Platform Tests
          path: tests/e2e/test-results/junit.xml
          reporter: java-junit
          fail-on-error: false

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 🔐 Security Scan - C# API
        run: |
          echo "🔍 Running security scan against API: ${{ inputs.api_url }}"
          
          # OWASP ZAP baseline scan
          docker run -v $(pwd):/zap/wrk/:rw \
            -t owasp/zap2docker-stable zap-baseline.py \
            -t ${{ inputs.api_url }}/health \
            -J api-security-report.json \
            -r api-security-report.html || true
      
      - name: 🔐 Security Scan - Angular Web App
        run: |
          echo "🔍 Running security scan against Web: ${{ inputs.web_url }}"
          
          # OWASP ZAP baseline scan
          docker run -v $(pwd):/zap/wrk/:rw \
            -t owasp/zap2docker-stable zap-baseline.py \
            -t ${{ inputs.web_url }} \
            -J web-security-report.json \
            -r web-security-report.html || true
      
      - name: 📊 Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-reports
          path: |
            api-security-report.json
            api-security-report.html
            web-security-report.json
            web-security-report.html
          retention-days: 30

  performance-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: 🚀 Install Artillery for Load Testing
        run: |
          npm install -g artillery
      
      - name: 🔥 Run API Load Tests
        run: |
          cd tests/performance
          
          echo "🔍 Running load tests against API: ${{ inputs.api_url }}"
          
          # Create Artillery configuration
          cat > artillery-config.yml << EOF
          config:
            target: '${{ inputs.api_url }}'
            phases:
              - duration: 60
                arrivalRate: 10
                name: "Warm up"
              - duration: 120
                arrivalRate: 20
                name: "Load test"
          scenarios:
            - name: "API Health Check"
              requests:
                - get:
                    url: "/health"
          EOF
          
          # Run load test
          artillery run artillery-config.yml --output performance-report.json
          
          # Generate HTML report
          artillery report performance-report.json --output performance-report.html
      
      - name: 📊 Upload Performance Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-reports
          path: |
            tests/performance/performance-report.json
            tests/performance/performance-report.html
          retention-days: 30
      
      - name: 📊 Integration Test Summary
        if: always()
        run: |
          echo "🎯 Integration Test Suite Complete!"
          echo "📍 API URL: ${{ inputs.api_url }}"
          echo "📍 Web URL: ${{ inputs.web_url }}"
          echo "🌍 Environment: ${{ inputs.test_environment }}"
          echo "✅ C# API Integration Tests"
          echo "✅ Angular Integration Tests"
          echo "✅ Cross-Platform E2E Tests"
          echo "✅ Security Scanning"
          echo "✅ Performance Testing"