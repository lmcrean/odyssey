# Deploy Branch Preview for C# API and Angular Web App

name: Deploy Branch Preview (C# + Angular)

on:
  workflow_call:
    inputs:
      branch_name:
        description: "Branch name for deployment"
        required: true
        type: string
    outputs:
      api_url:
        description: "API preview URL"
        value: ${{ jobs.deploy-api.outputs.api_url }}
      web_url:
        description: "Web preview URL"
        value: ${{ jobs.deploy-web.outputs.web_url }}

jobs:
  deploy-api:
    runs-on: ubuntu-latest
    outputs:
      api_url: ${{ steps.deploy.outputs.api_url }}
    
    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 🔧 Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      
      - name: 📦 Restore and Build
        run: |
          cd apps/api
          dotnet restore
          dotnet build --configuration Release --no-restore
      
      - name: 🧪 Run Tests
        run: |
          cd apps/api
          dotnet test --configuration Release --no-build
      
      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: 🛠️ Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
      
      - name: 📝 Create Branch-specific Dockerfile
        run: |
          cd apps/api
          cat > Dockerfile << 'EOF'
          FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base
          WORKDIR /app
          EXPOSE 8080
          
          FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
          WORKDIR /src
          
          COPY ["*.csproj", "./"]
          RUN dotnet restore
          
          COPY . .
          RUN dotnet publish -c Release -o /app/publish
          
          FROM base AS final
          WORKDIR /app
          COPY --from=build /app/publish .
          
          RUN adduser --disabled-password --gecos "" appuser && chown -R appuser /app
          USER appuser
          
          ENV ASPNETCORE_URLS=http://0.0.0.0:8080
          ENV ASPNETCORE_ENVIRONMENT=Staging
          
          ENTRYPOINT ["dotnet", "CompetitorAnalysis.Api.dll"]
          EOF
      
      - name: 🏗️ Build and Push Docker Image
        run: |
          cd apps/api
          
          # Create branch-specific service name
          BRANCH_SAFE=$(echo "${{ inputs.branch_name }}" | sed 's/[^a-zA-Z0-9-]/-/g' | tr '[:upper:]' '[:lower:]')
          SERVICE_NAME="competitor-api-${BRANCH_SAFE}"
          IMAGE_NAME="us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/api-images/${SERVICE_NAME}:${{ github.sha }}"
          
          echo "🏷️ Building image: $IMAGE_NAME"
          echo "🔖 Service name: $SERVICE_NAME"
          
          # Configure Docker
          gcloud auth configure-docker us-central1-docker.pkg.dev
          
          # Create repository if it doesn't exist
          gcloud artifacts repositories create api-images \
            --repository-format=docker \
            --location=us-central1 \
            --description="C# API Docker images" || true
          
          # Build and push
          docker build -t $IMAGE_NAME .
          docker push $IMAGE_NAME
          
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "SERVICE_NAME=$SERVICE_NAME" >> $GITHUB_ENV
      
      - name: 🚀 Deploy Branch Preview API
        id: deploy
        run: |
          # Deploy branch preview service
          echo "🚀 Deploying branch preview API: $SERVICE_NAME"
          gcloud run deploy $SERVICE_NAME \
            --image $IMAGE_NAME \
            --platform managed \
            --region us-central1 \
            --allow-unauthenticated \
            --memory=512Mi \
            --cpu=1 \
            --min-instances=0 \
            --max-instances=5 \
            --timeout=300s \
            --concurrency=100 \
            --set-env-vars="ASPNETCORE_ENVIRONMENT=Staging" \
            --set-env-vars="BRANCH_NAME=${{ inputs.branch_name }}" \
            --port=8080 \
            --tag=preview
          
          # Get service URL
          SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --platform managed --region us-central1 --format 'value(status.url)')
          
          echo "🌐 Branch preview API deployed at: $SERVICE_URL"
          echo "api_url=$SERVICE_URL" >> $GITHUB_OUTPUT
      
      - name: ✅ Validate API Preview
        run: |
          API_URL="${{ steps.deploy.outputs.api_url }}"
          echo "🔍 Testing branch preview API at: $API_URL"
          
          # Health check with retry
          for i in {1..5}; do
            echo "🏥 Health check attempt $i/5..."
            
            if curl -s -f "$API_URL/health" -m 30; then
              echo "✅ Branch preview API is working!"
              break
            else
              if [ $i -eq 5 ]; then
                echo "❌ Branch preview API health check failed"
                exit 1
              fi
            fi
            
            sleep 10
          done

  deploy-web:
    runs-on: ubuntu-latest
    needs: deploy-api
    outputs:
      web_url: ${{ steps.deploy.outputs.web_url }}
    
    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: apps/web/package-lock.json
      
      - name: 📥 Install Dependencies
        run: |
          cd apps/web
          npm ci
      
      - name: 🔧 Build Angular App for Preview
        run: |
          cd apps/web
          npm run build:staging
        env:
          # Use the branch preview API URL
          API_BASE_URL: ${{ needs.deploy-api.outputs.api_url }}
      
      - name: 🧪 Run Tests
        run: |
          cd apps/web
          npm run test:ci
      
      - name: 🔐 Authenticate to Firebase
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}
      
      - name: 🛠️ Setup Firebase CLI
        run: |
          npm install -g firebase-tools
      
      - name: 🚀 Deploy Web Preview to Firebase
        id: deploy
        run: |
          cd apps/web
          
          # Create branch-specific channel
          BRANCH_SAFE=$(echo "${{ inputs.branch_name }}" | sed 's/[^a-zA-Z0-9-]/-/g' | tr '[:upper:]' '[:lower:]')
          CHANNEL_NAME="preview-${BRANCH_SAFE}"
          
          echo "🚀 Deploying to Firebase preview channel: $CHANNEL_NAME"
          
          # Deploy to preview channel
          firebase hosting:channel:deploy $CHANNEL_NAME \
            --project ${{ secrets.FIREBASE_PROJECT_ID }} \
            --expires 7d
          
          # Get the preview URL
          PREVIEW_URL="https://${{ secrets.FIREBASE_PROJECT_ID }}--${CHANNEL_NAME}.web.app"
          
          echo "🌐 Web preview deployed at: $PREVIEW_URL"
          echo "web_url=$PREVIEW_URL" >> $GITHUB_OUTPUT
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
      
      - name: ✅ Validate Web Preview
        run: |
          WEB_URL="${{ steps.deploy.outputs.web_url }}"
          echo "🔍 Testing web preview at: $WEB_URL"
          
          # Health check with retry
          for i in {1..5}; do
            echo "🌐 Web preview check attempt $i/5..."
            
            RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "$WEB_URL" -m 30)
            
            if [ "$RESPONSE" = "200" ]; then
              echo "✅ Web preview is working!"
              break
            else
              if [ $i -eq 5 ]; then
                echo "❌ Web preview health check failed"
                exit 1
              fi
            fi
            
            sleep 10
          done
      
      - name: 📊 Branch Preview Summary
        run: |
          echo "🎯 Branch Preview Deployment Complete!"
          echo "📍 API URL: ${{ needs.deploy-api.outputs.api_url }}"
          echo "📍 Web URL: ${{ steps.deploy.outputs.web_url }}"
          echo "🌿 Branch: ${{ inputs.branch_name }}"
          echo "⏰ Expires: 7 days"
          echo "✅ Both services are healthy"